# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import turbo_message_pb2 as turbo__message__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in turbo_message_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TurboMessageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterUser = channel.unary_unary(
                '/TurboMessage/RegisterUser',
                request_serializer=turbo__message__pb2.UserCredentials.SerializeToString,
                response_deserializer=turbo__message__pb2.Response.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/TurboMessage/Login',
                request_serializer=turbo__message__pb2.UserCredentials.SerializeToString,
                response_deserializer=turbo__message__pb2.Response.FromString,
                _registered_method=True)
        self.SendMail = channel.unary_unary(
                '/TurboMessage/SendMail',
                request_serializer=turbo__message__pb2.MailRequest.SerializeToString,
                response_deserializer=turbo__message__pb2.Response.FromString,
                _registered_method=True)
        self.GetInbox = channel.unary_unary(
                '/TurboMessage/GetInbox',
                request_serializer=turbo__message__pb2.User.SerializeToString,
                response_deserializer=turbo__message__pb2.MailList.FromString,
                _registered_method=True)
        self.GetOutbox = channel.unary_unary(
                '/TurboMessage/GetOutbox',
                request_serializer=turbo__message__pb2.User.SerializeToString,
                response_deserializer=turbo__message__pb2.MailList.FromString,
                _registered_method=True)
        self.ReadMail = channel.unary_unary(
                '/TurboMessage/ReadMail',
                request_serializer=turbo__message__pb2.MailId.SerializeToString,
                response_deserializer=turbo__message__pb2.Mail.FromString,
                _registered_method=True)
        self.DeleteMail = channel.unary_unary(
                '/TurboMessage/DeleteMail',
                request_serializer=turbo__message__pb2.MailId.SerializeToString,
                response_deserializer=turbo__message__pb2.Response.FromString,
                _registered_method=True)


class TurboMessageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInbox(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOutbox(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadMail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TurboMessageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=turbo__message__pb2.UserCredentials.FromString,
                    response_serializer=turbo__message__pb2.Response.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=turbo__message__pb2.UserCredentials.FromString,
                    response_serializer=turbo__message__pb2.Response.SerializeToString,
            ),
            'SendMail': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMail,
                    request_deserializer=turbo__message__pb2.MailRequest.FromString,
                    response_serializer=turbo__message__pb2.Response.SerializeToString,
            ),
            'GetInbox': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInbox,
                    request_deserializer=turbo__message__pb2.User.FromString,
                    response_serializer=turbo__message__pb2.MailList.SerializeToString,
            ),
            'GetOutbox': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOutbox,
                    request_deserializer=turbo__message__pb2.User.FromString,
                    response_serializer=turbo__message__pb2.MailList.SerializeToString,
            ),
            'ReadMail': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadMail,
                    request_deserializer=turbo__message__pb2.MailId.FromString,
                    response_serializer=turbo__message__pb2.Mail.SerializeToString,
            ),
            'DeleteMail': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMail,
                    request_deserializer=turbo__message__pb2.MailId.FromString,
                    response_serializer=turbo__message__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TurboMessage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('TurboMessage', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TurboMessage(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TurboMessage/RegisterUser',
            turbo__message__pb2.UserCredentials.SerializeToString,
            turbo__message__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TurboMessage/Login',
            turbo__message__pb2.UserCredentials.SerializeToString,
            turbo__message__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TurboMessage/SendMail',
            turbo__message__pb2.MailRequest.SerializeToString,
            turbo__message__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInbox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TurboMessage/GetInbox',
            turbo__message__pb2.User.SerializeToString,
            turbo__message__pb2.MailList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOutbox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TurboMessage/GetOutbox',
            turbo__message__pb2.User.SerializeToString,
            turbo__message__pb2.MailList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadMail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TurboMessage/ReadMail',
            turbo__message__pb2.MailId.SerializeToString,
            turbo__message__pb2.Mail.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TurboMessage/DeleteMail',
            turbo__message__pb2.MailId.SerializeToString,
            turbo__message__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
